set architecture "LIFCL"
set device "LIFCL-33U"
set package "FCCSP104"
set speed "7_High-Performance_1.0V"
set WRAPPER_INST "lscc_dphy_rx_inst"
set FAMILY "LIFCL"
set RX_TYPE "CSI2"
set DPHY_RX_IP "LATTICE"
set NUM_RX_LANE 2
set RX_GEAR 8
set CIL_BYPASS "CIL_BYPASSED"
set LMMI "OFF"
set AXI4 "OFF"
set DESKEW_EN "DISABLED"
set HSEL "DISABLED"
set TEST_PATTERN "0b10000000001000000000000000000000"
set RX_CLK_MODE "HS_LP"
set BYTECLK_MHZ 50
set BYTECLK_MHZ_FLOAT 50.000000
set SYNCCLK_MHZ 100.000000
set DATA_SETTLE_CYC 6
set T_DATA_SETTLE "0b001100"
set T_CLK_SETTLE "0b001111"
set PARSER "ON"
set LANE_ALIGN "ON"
set FIFO_DEPTH 4
set FIFO_TYPE "EBR"
set RX_FIFO "ON"
set RX_FIFO_IMPL "LUT"
set RX_FIFO_DEPTH 32
set NUM_QUE_ENT 4
set RX_FIFO_TYPE "SINGLE"
set RX_FIFO_PKT_DLY 16
set RX_FIFO_CTR_WIDTH 5
set FR_FIFO_CLKMODE "DC"
set FIFO_IF "ALIGNED"
set RX_FIFO_MISC "ON"


set BYTE_CLK_PERIOD [expr {double(round(1000000/$BYTECLK_MHZ_FLOAT))/1000}]
set DPHY_CLK_PERIOD [expr {$BYTE_CLK_PERIOD*2/$RX_GEAR}]

## NOTES .........................................................................................
##    1) Please constrain all the clocks in the design at the top level
##       (create_clock and create_generated_clock).
##
##    2) Use set_clock_groups for asynchronous clock domains.
##
##    3) Constraints for hard d-phy byteclocks  clk_byte_hs_o* and  clk_byte_o* are 
##       autogenerated if using LSE.
##
##       Constraints are not automatically propagated to system level constraints  when the 
##       synthesis tool used is SynplifyPro. Please see 
##       <proj_dir>/<instance_name>/eval/post-syn_constraints.pdc for samples of
##       SynplifyPro false path constraints.
##
##    4) There is a FIFO to handle clock domain crossing from the non-continuous byteclock
##       domain clk_byte_o to the freerunning clk_byte_fr_i. Please ignore timing violations
##       that might be reported.
## ...............................................................................................

##### asynchronous 
if {($DPHY_RX_IP != "MIXEL")} {
set_false_path -through [get_nets -hierarchical {term_clk_en_o* term_d_en_o*}]
}
if {($DPHY_RX_IP == "MIXEL")} {
## termination enable
set_false_path -through [get_nets -hierarchical {UCTXUPSC UTXSKD0N U1TXSK U2TXSKC U3TXSKC}]
## deserializer enable
set_false_path -to [get_pins -hierarchical {UTXRD0EN U1TXREQ U2TXREQ U3TXREQ}]
}

##### RX_FIFO constraints 
##  LSE         : automatically propagated to the top level post-synthesis timing constraints
##  SynplifyPro : these constraints need to be present in the post-synthesis constraint file (*.pdc) 
##                refer to <proj_dir>/<instance_name>/eval/post-syn_constraints.pdc for samples

##### asynchronous reset 
if {$RX_FIFO_TYPE == "PINGPONG"} { 
set_false_path -from [get_nets {*/*/*/*/*/reset_pp*}]
set_false_path  -from [get_nets -hierarchical wr_pp_sel*] 
# set_false_path -from [get_pins {lscc_dphy_rx_inst/NOCIL_TOP.u_dphy_rx_core/u_dphy_rx_wrap/u_rx_fifo/rx_fifo_pp.rx_fifo_pp_inst/fr_fifo_*/Reset lscc_dphy_rx_inst/NOCIL_TOP.u_dphy_rx_core/u_dphy_rx_wrap/u_rx_fifo/rx_fifo_pp.rx_fifo_pp_inst/fr_fifo_*/RPReset}]
}

if {($RX_FIFO == "ON") && ($FR_FIFO_CLKMODE == "DC")} { 
# set_false_path  -through [get_nets -hierarchical {wr_grey_sync_r*}]
# set_false_path  -through [get_nets -hierarchical {rd_grey_sync_r*}]
# set_false_path  -from [get_nets -hierarchical {rd_addr_r*}] -to [get_nets -hierarchical {rp_sync1_r*}]
# set_false_path  -from [get_nets -hierarchical {wr_addr_r*}] -to [get_nets -hierarchical {wp_sync1_r*}]   
set_false_path -through [get_pins -hierarchical {fr_fifo*/Reset fr_fifo*/RPReset}]
} 

if {($DPHY_RX_IP == "MIXEL")} {
set_false_path -through [get_pins -hierarchical {URXDHS* U1RXDHS* U2RXDHS* U3RXDHS*}]
}



